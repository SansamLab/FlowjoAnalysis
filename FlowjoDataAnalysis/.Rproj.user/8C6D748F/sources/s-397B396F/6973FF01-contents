library(flowCore)
library(ggcyto)
library(flowAI)
library(openCyto)
library(flowWorkspace)
library(gridExtra)
library(CytoML)

# load in workspace
data <- open_flowjo_xml("04-Oct-2021.wsp")

# load fcs files
myfiles <- list.files(path=".", pattern=".fcs")
fs <- flowCore::read.flowSet(myfiles, path=".")
fs

#find names of columns
names(fs[[1]])

#keyword search
keyword(fs[[1]])$FILENAME

#pull out values from columns
each_col(fs[[1]], median)
each_col(fs[[1]], min)
each_col(fs[[1]], max)
each_col(fs[[1]], summary)
each_col(fs[[1]], sort)
fs[[1]]@exprs

#setup gate setting
gs <- flowjo_to_gatingset(data, name = 2)
plot(gs)

#plot each gate specifically
autoplot(gs[2], c("APC+"), bins = 200)
autoplot(gs[2], c("Cells"))

autoplot(gs[[1]], c("Cells", "APC+"))

autoplot(gs[c(1,2,3,4)], "APC+", bins = 200)

#pull out specific column
colval <- each_col(fs[[1]], median)
colval <- data.frame(colval)
names <- rownames(colval)
rownames(colval) <- NULL
newdata <- cbind(names,colval)
newdata
FL1A <- newdata %>% filter(names == "FL1-A")
FL1A

lst <- lapply(1:length(fs),function(flwst){return(as.data.frame(exprs(fs[[flwst]]))$"FSC-A")})

#possibly going to work
gs_pop_get_stats(gs,c("Cells","APC+"))
clone1Cells <- gs_get_singlecell_expression_by_gate(gs[[1]], "Cells")
clone1APC <-  gs_get_singlecell_expression_by_gate(gs[[1]], "APC+")
df1 <- data.frame("Gate"="Cells", "Value" = clone1Cells)
colnames(df1) <- c("Gate", "FSC-H", "SSC-H")
df2 <- data.frame("Gate" = "APC+", "Value" = clone1APC)
colnames(df2) <- c("Gate", "APC-A", "FITC-A")
head(df1)
head(df2)


#possibly better than code directly above
df3 <- gs_get_singlecell_expression_by_gate(x=gs, nodes="Cells", other.markers=c("FSC-A","SSC-A","FL1-A"), threshold = FALSE)
names(df3) <- gsub("\\..*","",names(df3))
df3 <- lapply(df3, as.data.frame)
lapply(df3, NROW)
lapply(df3, head)

df4 <- gs_get_singlecell_expression_by_gate(x=gs, nodes="APC+", other.markers=c("FSC-A","SSC-A", "FL1-A"), threshold = FALSE)
names(df4) <- gsub("\\..*","",names(df4))
df4 <- lapply(df4, as.data.frame)
lapply(df4, NROW)
lapply(df4, head)

df5 <- gs_get_singlecell_expression_by_gate(x=gs, nodes=c("Cells","APC+"), other.markers=c("FSC-A","SSC-A"), threshold = FALSE, swap = TRUE)
names(df5) <- gsub("\\..*","",names(df5))
df5 <- lapply(df5, as.data.frame)
lapply(df5, NROW)
lapply(df5, head)

df4names <- lapply(names(df4), function(x) {
  df <- as.data.frame(df4[[x]])
  df$sample <- x
  return(df)
})
####### Playing with Code ########

#code to learn about functions
lst1 <- lapply(1:length(fs),function(flwst){return(data.frame("FSC"=as.data.frame(exprs(fs[[flwst]]))$"FSC-A","filename"=fs[[flwst]]$FILENAME))})
lst2 <- lapply(1:length(fs),function(flwst){return(data.frame("FSC"=as.data.frame(exprs(fs[[flwst]]))$"FSC-A"),"filename"=fs[[flwst]]$FILENAME)})

gs_pop_get_count_fast(gs)
gs_pop_get_count_with_meta(gs)
gs_pop_get_gate(gs,"/Cells/APC+")
gs_pop_get_gate(gs, "APC+")
gs_pop_get_gate(gs,"/Cells")
gs_pop_get_stats(gs,c("Cells","APC+"))

gh_pop_get_data(gs[2], y="root")
gh_pop_get_data(gs[2], y="/Cells")
gh_pop_get_data(gs, y="APC+")
gh_pop_get_data(gs[2])

fs[[1]]@exprs


gs_pop_get_stats_tfilter(gs,fs)
gs_pop_get_stats(gs[[1]], "Cells", type= pop.MFI)
gs_pop_get_stats(gs, "Cells", type = pop.MFI, inverse.transform = TRUE)

gs_pop_get_stats(gs, "APC+", type= pop.MFI)

ggcyto(fs[[1]], aes(x='FSC-A', y='SSC-A')) +
  geom_point()

gs_get_singlecell_expression(gs)

#possilby going to work
gs_pop_get_count_fast(gs[[1]],fs[[1]], "Cells", marginal=FALSE)
gs_pop_get_stats(gs,c("Cells","APC+"))
gs_get_singlecell_expression_by_gate(gs[[1]], "Cells")
gs_get_singlecell_expression_by_gate(gs[[1]], "APC+")


gh_pop_get_stats(gs, path="/Cells/APC+")



#### Argument are peramaters you want values for
#### Samples
#### Gate
